<?xml version="1.0"?>
<!-- Basic sailboat with gazebo plugins for dynamics -->
<robot xmlns:xacro="http://ros.org/wiki/xacro" name="sailboat">
  <xacro:arg name="locked" default="false" />
  <xacro:arg name="camera_enabled" default="false" />
  <xacro:arg name="gps_enabled" default="false" />
  <xacro:arg name="imu_enabled" default="true" />
  <xacro:arg name="lidar_enabled" default="false" />
  <xacro:arg name="sensors_enabled" default="false" />
  <xacro:arg name="camera_namespace" default="cameras"/>
  <xacro:arg name="sensor_namespace" default="sensors"/>
  <!-- Note: this is only used for some sensors that do not correctly use the
  robotNamespace parameter -->
  <xacro:arg name="namespace" default="sailboat"/>
  <xacro:property name="camera_namespace" value="$(arg camera_namespace)" scope="global" />
  <xacro:property name="sensor_namespace" value="$(arg sensor_namespace)" scope="global" />
  <xacro:property name="namespace" value="$(arg namespace)" scope="global" />

  

  <!-- === Decide wheter the robot is looked to the world === -->
  <xacro:if value="$(arg locked)">
    <gazebo>
      <link name="${namespace}_external_link">
        <inertial>
          <mass>0.001</mass>
          <inertia>
            <ixx>0.00000004</ixx>
            <ixy>0</ixy>
            <ixz>0</ixz>
            <iyy>0.00000004</iyy>
            <iyz>0</iyz>
            <izz>0.00000004</izz>
          </inertia>
        </inertial>
      </link>
      <link name="${namespace}_external_link_base">
        <inertial>
          <mass>0.001</mass>
          <inertia>
            <ixx>0.00000004</ixx>
            <ixy>0</ixy>
            <ixz>0</ixz>
            <iyy>0.00000004</iyy>
            <iyz>0</iyz>
            <izz>0.00000004</izz>
          </inertia>
        </inertial>
      </link>
      <joint name="${namespace}_external_pivot_joint" type="universal">
        <parent>${namespace}_external_link</parent>
        <child>${namespace}/base_link</child>
        <axis>
          <xyz>1 0 0</xyz>
        </axis>
        <axis2>
          <xyz>0 1 0</xyz>
        </axis2>
      </joint>
      <joint name="${namespace}_external_riser" type="prismatic">
        <parent>${namespace}_external_link_base</parent>
        <child>${namespace}_external_link</child>
        <axis>
          <limit>
            <lower>-3</lower>
            <upper>3</upper>
          </limit>
          <xyz>0 0 1</xyz>
        </axis>
      </joint>
      <plugin filename="gz-sim-detachable-joint-system" name="gz::sim::systems::DetachableJoint">
        <parent_link>${namespace}_external_link_base</parent_link>
        <child_model>sailboat</child_model>
        <child_link>${namespace}/base_link</child_link>
        <topic>/autosail/release</topic>
        <suppress_child_warning>true</suppress_child_warning>
      </plugin>
    
    </gazebo>
  </xacro:if>
  <!-- === The platform === -->
  <xacro:include filename="sailboat_gazebo.xacro"/>
  
  <gazebo> 
    <link name='${namespace}/wind_speed_link'>
      <pose relative_to='sailboat/base_link'>0 0 0.2 0 0 0</pose>
      <inertial>
        <mass>0.05</mass>
        <inertia>
          <ixx>4.1666666666666666e-05</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>8.3333333333333333e-05</iyy>
          <iyz>0</iyz>
          <izz>4.1666666666666666e-05</izz>
        </inertia>
      </inertial>
      <collision name='${namespace}/wind_speed_link_collision'>
        <pose>0 0 0.2 0 0 0</pose>
        <geometry>
          <box>
            <size>0.1 0.001 0.1</size>
          </box>
        </geometry>
      </collision>
      <self_collide>false</self_collide>
      <enable_wind>true</enable_wind>
    </link>
    
    <joint name='${namespace}/wind_speed_joint' type='revolute'>
      <pose>0 0 0.2 0 0 0</pose>
      <parent>${namespace}/base_link</parent>
      <child>${namespace}/wind_speed_link</child>
      <axis>
        <xyz>0 0 1</xyz>
        <limit>
          <lower>-inf</lower>   
          <upper>inf</upper>     
          <effort>inf</effort>
          <velocity>inf</velocity>
          <stiffness>100000000</stiffness>
          <dissipation>1</dissipation>
        </limit>
        <dynamics>
          <spring_reference>0</spring_reference>
          <spring_stiffness>0</spring_stiffness>
          <damping>0</damping>
          <friction>0</friction>
        </dynamics>
      </axis>
    </joint>    
    <plugin name='gz::sim::systems::JointStatePublisher' filename='gz-sim-joint-state-publisher-system'>
      <joint_name>${namespace}/wind_speed_joint</joint_name>
      <topic>wind_speed</topic>
    </plugin>
    <link name='${namespace}/wind_angle_link'>
      <pose relative_to='sailboat/base_link'>0.05 0 0.5 0 0 0</pose>
      <inertial>
        <mass>0.05</mass>
        <inertia>
          <ixx>4.1666666666666666e-05</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>8.3333333333333333e-05</iyy>
          <iyz>0</iyz>
          <izz>4.1666666666666666e-05</izz>
        </inertia>
      </inertial>
      <collision name='${namespace}/wind_angle_link_collision'>
        <pose>0.05 0 0.5 0 0 0</pose>
        <geometry>
          <box>
            <size>0.1 0.001 0.1</size>
          </box>
        </geometry>
      </collision>
      <self_collide>false</self_collide>
      <enable_wind>true</enable_wind>
    </link>
    
    <joint name='${namespace}/wind_angle_joint' type='revolute'>
      <pose>0 0 0.5 0 0 0</pose>
      <parent>${namespace}/base_link</parent>
      <child>${namespace}/wind_angle_link</child>
      <axis>
        <xyz>0 0 1</xyz>
        <limit>
          <lower>-inf</lower>   
          <upper>inf</upper>     
          <effort>inf</effort>
          <velocity>inf</velocity>
          <stiffness>100000000</stiffness>
          <dissipation>1</dissipation>
        </limit>
        <dynamics>
          <spring_reference>0</spring_reference>
          <spring_stiffness>0</spring_stiffness>
          <damping>0</damping>
          <friction>0</friction>
        </dynamics>
      </axis>
    </joint>    
    <plugin name='gz::sim::systems::JointStatePublisher' filename='gz-sim-joint-state-publisher-system'>
      <joint_name>${namespace}/wind_angle_joint</joint_name>
      <topic>wind_angle</topic>
    </plugin>
    <link name='sphere_10'>
        <pose relative_to='${namespace}/base_link'>0.1 0 0.5 0 0 0</pose>
        <enable_wind>true</enable_wind>
        <self_collide>false</self_collide>
        <collision name='collision'>
          <geometry>
            <sphere>
              <radius>0.02</radius>
            </sphere>
          </geometry>
          <surface>
            <friction>
              <ode/>
            </friction>
            <bounce/>
            <contact/>
          </surface>
        </collision>
        <inertial>
          <pose>0 0 0 0 -0 0</pose>
          <mass>0.01</mass>
          <inertia>
            <ixx>1</ixx>
            <ixy>0</ixy>
            <ixz>0</ixz>
            <iyy>1</iyy>
            <iyz>0</iyz>
            <izz>1</izz>
          </inertia>
        </inertial>
      </link>
      <joint name='sphere_10_joint' type='fixed'>
        <parent>${namespace}/wind_angle_link</parent>
        <child>sphere_10</child>
        <pose relative_to='${namespace}/base_link'>0.1 0 0.5 0 0 0</pose>
      </joint>
  </gazebo>
  <!-- === TF === -->
  <!-- Publish robot state information -->
  <gazebo>
    <plugin filename="libgz-sim-pose-publisher-system.so"
      name="gz::sim::systems::PosePublisher">
      <publish_link_pose>true</publish_link_pose>
      <publish_sensor_pose>false</publish_sensor_pose>
      <publish_collision_pose>true</publish_collision_pose>
      <publish_visual_pose>false</publish_visual_pose>
      <publish_nested_model_pose>true</publish_nested_model_pose>
      <publish_model_pose>false</publish_model_pose>
      <use_pose_vector_msg>true</use_pose_vector_msg>
      <static_publisher>true</static_publisher>
      <static_update_frequency>1</static_update_frequency>
    </plugin>
  </gazebo>

  <!-- === Sensors === -->
  <xacro:if value="$(arg sensors_enabled)">
    <!-- Add a front camera -->
    <xacro:if value="$(arg camera_enabled)">
      <xacro:camera name="${namepace}_front_camera" y="0.3" x="0.75" P="${radians(15)}" />
    </xacro:if>

    <!-- Add simulated GPS -->
    <xacro:if value="$(arg gps_enabled)">
      <xacro:gps name="${namespace}_gps_sensor" x="0" />
    </xacro:if>

    <!-- Add Simulated IMU -->
    <xacro:if value="$(arg imu_enabled)">
      <xacro:imu name="${namespace}_imu_sensor" y="0" />
    </xacro:if>

  </xacro:if>

</robot>
